name: Create release

on:
  push:
    branches: [main]

permissions:
  contents: read

jobs:
  releasepy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install .python-version
        run: |
          uv python install

      - name: Sync dependencies
        run: |
          uv sync --all-groups

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create conventional commit
        run: |
          echo "# Dummy file for release" > .dummy
          git add .dummy
          git commit -m "fix(dummy): add release test commit for verification"

      - name: Create release
        run: |
          uv run release.py

      - name: Extract version number
        id: version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Verify version was updated in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Verifying version $VERSION was updated in all files..."

          # Check pyproject.toml
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          if [ "$PYPROJECT_VERSION" != "$VERSION" ]; then
            echo "Error: Version mismatch in pyproject.toml"
            echo "Expected: $VERSION"
            echo "Found: $PYPROJECT_VERSION"
            exit 1
          fi
          echo "✓ pyproject.toml version: $PYPROJECT_VERSION"

          # Check __init__.py
          INIT_VERSION=$(python -c "import prompts_mcp; print(prompts_mcp.__version__)")
          if [ "$INIT_VERSION" != "$VERSION" ]; then
            echo "Error: Version mismatch in prompts_mcp/__init__.py"
            echo "Expected: $VERSION"
            echo "Found: $INIT_VERSION"
            exit 1
          fi
          echo "✓ prompts_mcp/__init__.py version: $INIT_VERSION"

          echo "All version files verified successfully!"

      - name: Verify changelog was updated
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Verifying changelog was updated for version $VERSION..."

          # Check if the version appears in the changelog
          if ! grep -q "^## $VERSION" CHANGELOG.md; then
            echo "Error: Version $VERSION not found in CHANGELOG.md"
            echo "Looking for pattern: '## $VERSION'"
            echo "Current changelog entries:"
            grep "^## " CHANGELOG.md | head -5
            exit 1
          fi

          # Check if the changelog entry has a date
          if ! grep -A1 "^## $VERSION" CHANGELOG.md | grep -q "([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])"; then
            echo "Error: Version $VERSION entry in CHANGELOG.md is missing date"
            echo "Expected format: '## $VERSION (YYYY-MM-DD)'"
            echo "Found entry:"
            grep -A1 "^## $VERSION" CHANGELOG.md
            exit 1
          fi

          echo "✓ Changelog updated for version $VERSION with date"

      - name: Verify distribution files exist
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking for distribution files with version: $VERSION"

          # Check for .tar.gz file
          TAR_FILE="dist/prompts_mcp-${VERSION}.tar.gz"
          if [ ! -f "$TAR_FILE" ]; then
            echo "Error: Expected file $TAR_FILE not found"
            ls -la dist/
            exit 1
          fi
          echo "✓ Found $TAR_FILE"

          # Check for .whl file
          WHL_FILE="dist/prompts_mcp-${VERSION}-py3-none-any.whl"
          if [ ! -f "$WHL_FILE" ]; then
            echo "Error: Expected file $WHL_FILE not found"
            ls -la dist/
            exit 1
          fi
          echo "✓ Found $WHL_FILE"

          echo "All distribution files verified successfully!"

      - name: Verify git tag was created
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Verifying git tag $VERSION was created..."

          # Check if the tag exists (without v prefix)
          if ! git tag -l "$VERSION" | grep -q "^$VERSION$"; then
            echo "Error: Git tag $VERSION not found"
            echo "Available tags:"
            git tag -l | tail -10
            exit 1
          fi

          # Verify the tag points to the current commit
          TAG_COMMIT=$(git rev-list -n 1 "$VERSION")
          CURRENT_COMMIT=$(git rev-parse HEAD)

          if [ "$TAG_COMMIT" != "$CURRENT_COMMIT" ]; then
            echo "Error: Git tag $VERSION does not point to current commit"
            echo "Tag commit: $TAG_COMMIT"
            echo "Current commit: $CURRENT_COMMIT"
            exit 1
          fi

          echo "✓ Git tag $VERSION created and points to current commit"
          echo "Tag commit: $TAG_COMMIT"

          # Verify the commit message format
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          EXPECTED_MESSAGE="chore: Release $VERSION"

          if [ "$COMMIT_MESSAGE" != "$EXPECTED_MESSAGE" ]; then
            echo "Error: Commit message does not match expected format"
            echo "Expected: $EXPECTED_MESSAGE"
            echo "Found: $COMMIT_MESSAGE"
            exit 1
          fi

          echo "✓ Commit message format verified: $COMMIT_MESSAGE"

      - name: Verify no version change on second run
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Testing idempotent release - running release script again..."

          # Store current version before second run
          ORIGINAL_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Original version: $ORIGINAL_VERSION"

          # Run release script again
          echo "Running release script again..."
          uv run release.py

          # Check if version changed
          NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Version after second run: $NEW_VERSION"

          if [ "$ORIGINAL_VERSION" != "$NEW_VERSION" ]; then
            echo "Error: Version changed on second release run!"
            echo "Original: $ORIGINAL_VERSION"
            echo "New: $NEW_VERSION"
            echo "Release should be idempotent when no changes exist"
            exit 1
          fi

          echo "✓ Release is idempotent - version unchanged on second run"

      - name: Test RC creation and verify RC numbering
        run: |
          echo "Testing RC creation with uv run release.py rc..."

          # Store current version before RC creation
          ORIGINAL_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Original version before RC: $ORIGINAL_VERSION"

          # Create a dummy commit for RC testing
          echo "# RC test commit" > .rc_test
          git add .rc_test
          git commit -m "fix(dummy): add RC test commit for verification"

          # Run RC creation
          echo "Running: uv run release.py rc"
          uv run release.py rc

          # Extract the new RC version
          RC_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "RC version created: $RC_VERSION"

          # Verify RC version format
          if [[ ! "$RC_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$ ]]; then
            echo "Error: RC version format is incorrect"
            echo "Expected format: X.Y.ZrcN (e.g., 1.6.1rc1)"
            echo "Found: $RC_VERSION"
            exit 1
          fi
          echo "✓ RC version format is correct: $RC_VERSION"

          # Verify RC starts from rc1, not rc0
          RC_NUMBER=$(echo "$RC_VERSION" | sed 's/.*rc\([0-9]*\)$/\1/')
          if [ "$RC_NUMBER" != "1" ]; then
            echo "Error: RC version should start from rc1, not rc$RC_NUMBER"
            echo "Expected: ${RC_VERSION%rc*}rc1"
            echo "Found: $RC_VERSION"
            exit 1
          fi
          echo "✓ RC version correctly starts from rc1: $RC_VERSION"

          # Verify RC version is higher than original
          if [ "$RC_VERSION" = "$ORIGINAL_VERSION" ]; then
            echo "Error: RC version should be different from original version"
            echo "Original: $ORIGINAL_VERSION"
            echo "RC: $RC_VERSION"
            exit 1
          fi
          echo "✓ RC version is different from original: $ORIGINAL_VERSION -> $RC_VERSION"

          # Verify RC version appears in changelog
          if ! grep -q "^## $RC_VERSION" CHANGELOG.md; then
            echo "Error: RC version $RC_VERSION not found in CHANGELOG.md"
            echo "Looking for pattern: '## $RC_VERSION'"
            echo "Current changelog entries:"
            grep "^## " CHANGELOG.md | head -5
            exit 1
          fi
          echo "✓ RC version $RC_VERSION found in CHANGELOG.md"

          # Verify RC distribution files exist
          RC_TAR_FILE="dist/prompts_mcp-${RC_VERSION}.tar.gz"
          RC_WHL_FILE="dist/prompts_mcp-${RC_VERSION}-py3-none-any.whl"

          if [ ! -f "$RC_TAR_FILE" ]; then
            echo "Error: Expected RC file $RC_TAR_FILE not found"
            ls -la dist/
            exit 1
          fi
          echo "✓ Found RC tar file: $RC_TAR_FILE"

          if [ ! -f "$RC_WHL_FILE" ]; then
            echo "Error: Expected RC file $RC_WHL_FILE not found"
            ls -la dist/
            exit 1
          fi
          echo "✓ Found RC wheel file: $RC_WHL_FILE"

          # Verify RC git tag was created
          if ! git tag -l "$RC_VERSION" | grep -q "^$RC_VERSION$"; then
            echo "Error: RC git tag $RC_VERSION not found"
            echo "Available tags:"
            git tag -l | tail -10
            exit 1
          fi
          echo "✓ RC git tag $RC_VERSION created"

          # Test creating a second RC to verify incrementing
          echo "Testing second RC creation..."
          echo "# Second RC test commit" > .rc_test2
          git add .rc_test2
          git commit -m "fix(dummy): add second RC test commit for verification"

          # Run second RC creation
          uv run release.py rc

          # Extract the second RC version
          RC_VERSION_2=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Second RC version created: $RC_VERSION_2"

          # Verify second RC is rc2
          RC_NUMBER_2=$(echo "$RC_VERSION_2" | sed 's/.*rc\([0-9]*\)$/\1/')
          if [ "$RC_NUMBER_2" != "2" ]; then
            echo "Error: Second RC should be rc2, not rc$RC_NUMBER_2"
            echo "Expected: ${RC_VERSION_2%rc*}rc2"
            echo "Found: $RC_VERSION_2"
            exit 1
          fi
          echo "✓ Second RC correctly increments to rc2: $RC_VERSION_2"

          echo "✓ All RC creation and numbering tests passed!"
