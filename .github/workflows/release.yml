name: Create release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: read-all

jobs:
  releasepy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install .python-version
        run: |
          uv python install

      - name: Install dependencies
        run: |
          uv sync --group commit

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create test commit
        run: |
          # Create a dummy commit to test the release process
          echo "# Test commit for release workflow" >> test_release.md
          git add test_release.md
          git commit -m "feat: add test commit for release workflow validation

          This commit is created by the GitHub Actions workflow to test the release process.
          It should trigger a patch version bump when running commitizen."

      - name: Ensure clean working tree
        run: |
          # Check git status to ensure working tree is clean
          echo "Checking git status before release..."
          git status
          git status --porcelain

          # If there are any uncommitted changes, commit them
          if [ -n "$(git status --porcelain)" ]; then
            echo "Working tree has uncommitted changes, committing them..."
            git add .
            git commit -m "chore: commit remaining changes before release"
          else
            echo "Working tree is clean"
          fi

      - name: Create rc
        env:
          TESTPYPI_TOKEN: ${{ secrets.TESTPYPI_TOKEN }}
        run: |
          # Capture initial state
          initial_version=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "Initial version: $initial_version"

          # Create .pypirc file for testpypi authentication if token is available
          if [ -n "$TESTPYPI_TOKEN" ]; then
            echo "Creating .pypirc for testpypi authentication..."
            mkdir -p ~/.config
            cat > ~/.pypirc << EOF
          [distutils]
          index-servers =
              pypi
              testpypi

          [pypi]
          repository = https://upload.pypi.org/legacy/

          [testpypi]
          repository = https://test.pypi.org/legacy/
          username = __token__
          password = $TESTPYPI_TOKEN
          EOF
            echo "✅ .pypirc configured for testpypi"
          else
            echo "⚠️  No TESTPYPI_TOKEN found, publishing may fail"
          fi

          # Run the release script and capture exit code
          echo "Running release script..."
          if [ -n "$TESTPYPI_TOKEN" ]; then
            # Run full release script with publishing
            uv run python release.py rc > /tmp/release_output.log 2>&1
            release_exit_code=$?
          else
            # Run only the bump and build parts, skip publishing
            echo "⚠️  Skipping publishing due to missing TESTPYPI_TOKEN"
            echo "Running bump and build only..."

            # Run bump command
            echo "Creating pre-release..."
            uv run cz bump --prerelease rc --yes > /tmp/release_output.log 2>&1
            bump_exit_code=$?

            if [ $bump_exit_code -eq 0 ]; then
              echo "✅ Version bump completed successfully"
              # Run build command
              echo "Building package..."
              uv build >> /tmp/release_output.log 2>&1
              build_exit_code=$?

              if [ $build_exit_code -eq 0 ]; then
                echo "✅ Package build completed successfully"
                release_exit_code=0
              else
                echo "❌ Package build failed with exit code $build_exit_code"
                release_exit_code=$build_exit_code
              fi
            else
              echo "❌ Version bump failed with exit code $bump_exit_code"
              release_exit_code=$bump_exit_code
            fi
          fi

          echo "Release script exit code: $release_exit_code"
          echo "Release script output:"
          cat /tmp/release_output.log

          if [ $release_exit_code -eq 0 ]; then
            echo "✅ Release script completed successfully"
          else
            echo "❌ Release script failed with exit code $release_exit_code"
            exit 1
          fi

          # Verify expected outcomes (only if release was successful)
          echo "Verifying RC creation results..."

          # Check if version was bumped
          new_version=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "New version: $new_version"

          if [[ "$new_version" == *"rc"* ]]; then
            echo "✅ Version contains 'rc' suffix"
          else
            echo "❌ Version does not contain 'rc' suffix"
            exit 1
          fi

          # Check if dist directory was created
          if [ -d "dist" ]; then
            echo "✅ dist/ directory was created"
            ls -la dist/
          else
            echo "❌ dist/ directory was not created"
            exit 1
          fi

          # Check if package files exist
          if ls dist/*.whl 1> /dev/null 2>&1; then
            echo "✅ Wheel file was created"
          else
            echo "❌ Wheel file was not created"
            exit 1
          fi

          if ls dist/*.tar.gz 1> /dev/null 2>&1; then
            echo "✅ Source distribution was created"
          else
            echo "❌ Source distribution was not created"
            exit 1
          fi

          # Check if changelog was updated
          if [ -f "CHANGELOG.md" ]; then
            echo "✅ CHANGELOG.md exists"

            # Check if the new version appears in changelog
            if grep -q "$new_version" CHANGELOG.md; then
              echo "✅ CHANGELOG.md contains new version: $new_version"
            else
              echo "❌ CHANGELOG.md does not contain new version: $new_version"
              echo "Changelog content:"
              head -20 CHANGELOG.md
              exit 1
            fi

            # Check if changelog has recent entries
            if grep -q "## \[$new_version\]" CHANGELOG.md; then
              echo "✅ CHANGELOG.md has proper version header for $new_version"
            else
              echo "❌ CHANGELOG.md missing proper version header for $new_version"
              exit 1
            fi
          else
            echo "❌ CHANGELOG.md file does not exist"
            exit 1
          fi

          # Check if git tag was created
          echo "Checking git tags..."

          # List all tags to see what was created
          echo "All git tags:"
          git tag --sort=-version:refname | head -10

          # Check if the new version tag exists
          if git tag -l | grep -q "^$new_version$"; then
            echo "✅ Git tag '$new_version' was created"

            # Verify the tag points to the current commit
            tag_commit=$(git rev-list -n 1 "$new_version")
            current_commit=$(git rev-parse HEAD)

            if [ "$tag_commit" = "$current_commit" ]; then
              echo "✅ Git tag '$new_version' points to current commit"
            else
              echo "❌ Git tag '$new_version' does not point to current commit"
              echo "Tag commit: $tag_commit"
              echo "Current commit: $current_commit"
              exit 1
            fi

            # Show tag details
            echo "Tag details:"
            git show --no-patch --format=fuller "$new_version"
          else
            echo "❌ Git tag '$new_version' was not created"
            echo "Available tags:"
            git tag --sort=-version:refname
            exit 1
          fi

          echo "✅ Create rc functionality test passed!"
