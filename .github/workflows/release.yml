name: Create release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: read-all

jobs:
  releasepy:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"

      - name: Install .python-version
        run: |
          uv python install

      - name: Install dependencies
        run: |
          uv sync --group commit

      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Create test commit
        run: |
          # Create a dummy commit to test the release process
          echo "# Test commit for release workflow" >> test_release.md
          git add test_release.md
          git commit -m "feat: add test commit for release workflow validation

          This commit is created by the GitHub Actions workflow to test the release process.
          It should trigger a patch version bump when running commitizen."
          echo "✅ Test commit created"

          # Debug: Show recent commits and tags
          echo "Recent commits:"
          git log --oneline -3
          echo "Recent tags:"
          git tag --sort=-version:refname | head -5

          # Verify the commit was created properly
          echo "Verifying test commit:"
          git show --stat HEAD

      - name: Create rc
        run: |
          # Capture initial state
          initial_version=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "Initial version: $initial_version"

          # Debug: Show what commitizen will see
          echo "All tags:"
          git tag -l | sort -V
          echo "Commits since last tag:"
          git log --oneline $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline -5
          echo "Current HEAD commit:"
          git log --oneline -1

          # Temporarily disable incremental changelog for testing
          echo "Temporarily disabling incremental changelog for testing..."
          sed -i 's/changelog_incremental = true/changelog_incremental = false/' pyproject.toml

          # Run the RC creation and capture output
          echo "Running: uv run release.py rc"
          uv run release.py rc 2>&1 | tee /tmp/release_output.log
          release_exit_code=${PIPESTATUS[0]}

          if [ $release_exit_code -eq 0 ]; then
            echo "✅ Release script completed successfully"
          else
            echo "❌ Release script failed with exit code $release_exit_code"
            cat /tmp/release_output.log
            exit 1
          fi

          # Verify expected outcomes (only if release was successful)
          echo "Verifying RC creation results..."

          # Check if version was bumped
          new_version=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
          echo "New version: $new_version"

          if [[ "$new_version" == *"rc"* ]]; then
            echo "✅ Version contains 'rc' suffix"
          else
            echo "❌ Version does not contain 'rc' suffix"
            exit 1
          fi

          # Check if dist directory was created
          if [ -d "dist" ]; then
            echo "✅ dist/ directory was created"
            ls -la dist/
          else
            echo "❌ dist/ directory was not created"
            exit 1
          fi

          # Check if package files exist
          if ls dist/*.whl 1> /dev/null 2>&1; then
            echo "✅ Wheel file was created"
          else
            echo "❌ Wheel file was not created"
            exit 1
          fi

          if ls dist/*.tar.gz 1> /dev/null 2>&1; then
            echo "✅ Source distribution was created"
          else
            echo "❌ Source distribution was not created"
            exit 1
          fi

          # Check if changelog was updated
          if [ -f "CHANGELOG.md" ]; then
            echo "✅ CHANGELOG.md exists"

            # Check if the new version appears in changelog
            if grep -q "$new_version" CHANGELOG.md; then
              echo "✅ CHANGELOG.md contains new version: $new_version"
            else
              echo "❌ CHANGELOG.md does not contain new version: $new_version"
              echo "Changelog content:"
              head -20 CHANGELOG.md
              exit 1
            fi

            # Check if changelog has recent entries
            if grep -q "## \[$new_version\]" CHANGELOG.md; then
              echo "✅ CHANGELOG.md has proper version header for $new_version"
            else
              echo "❌ CHANGELOG.md missing proper version header for $new_version"
              exit 1
            fi
          else
            echo "❌ CHANGELOG.md file does not exist"
            exit 1
          fi

          # Check if git tag was created
          echo "Checking git tags..."

          # List all tags to see what was created
          echo "All git tags:"
          git tag --sort=-version:refname | head -10

          # Check if the new version tag exists
          if git tag -l | grep -q "^$new_version$"; then
            echo "✅ Git tag '$new_version' was created"

            # Verify the tag points to the current commit
            tag_commit=$(git rev-list -n 1 "$new_version")
            current_commit=$(git rev-parse HEAD)

            if [ "$tag_commit" = "$current_commit" ]; then
              echo "✅ Git tag '$new_version' points to current commit"
            else
              echo "❌ Git tag '$new_version' does not point to current commit"
              echo "Tag commit: $tag_commit"
              echo "Current commit: $current_commit"
              exit 1
            fi

            # Show tag details
            echo "Tag details:"
            git show --no-patch --format=fuller "$new_version"
          else
            echo "❌ Git tag '$new_version' was not created"
            echo "Available tags:"
            git tag --sort=-version:refname
            exit 1
          fi

          echo "✅ Create rc functionality test passed!"

      - name: Cleanup test files
        run: |
          # Restore original commitizen configuration
          echo "Restoring original commitizen configuration..."
          sed -i 's/changelog_incremental = false/changelog_incremental = true/' pyproject.toml

          # Remove the test file created during the workflow
          if [ -f "test_release.md" ]; then
            rm test_release.md
            echo "✅ Test file cleaned up"
          fi
